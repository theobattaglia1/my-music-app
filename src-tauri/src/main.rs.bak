// Prevents additional console window on Windows in release, DO NOT REMOVE!!
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

mod music;
mod database;

use music::{Song, Artist, Album, Playlist, ImportResult};
use database::Database;
use std::sync::Mutex;
use tauri::{Manager, State};
use serde::Deserialize;

// NEW ──────────────────────────────────────────────────────────────────────────
use tauri::api::path;
use sha1::{Digest, Sha1};
// ──────────────────────────────────────────────────────────────────────────────

struct AppState {
    db: Mutex<Option<Database>>,
}

// Initialize the database
fn init_database(app_handle: &tauri::AppHandle) -> Result<Database, String> {
    let app_dir = app_handle
        .path_resolver()
        .app_data_dir()
        .ok_or("Failed to get app data directory")?;

    std::fs::create_dir_all(&app_dir)
        .map_err(|e| format!("Failed to create app directory: {}", e))?;

    let db_path = app_dir.join("music_library.db");
    Database::new(&db_path).map_err(|e| format!("Failed to initialize database: {}", e))
}

// Import music files command
#[tauri::command]
async fn import_music_files(
    _app_handle: tauri::AppHandle,
    state: State<'_, AppState>,
    file_paths: Vec<String>,
) -> Result<ImportResult, String> {
    // Import the files and extract metadata
    let mut import_result = music::import_music_files(file_paths).await;

    // Get database
    let db = state.db.lock().unwrap();
    let db = db.as_ref().ok_or("Database not initialized")?;

    // Process each imported song
    for song in &mut import_result.songs {
        // Check if artist exists, create if not
        match db.find_artist_by_name(&song.artist) {
            Ok(Some(artist)) => {
                song.artist_id = Some(artist.id);
            }
            Ok(None) => {
                // Create new artist
                let artist = Artist {
                    id: music::generate_id(),
                    name: song.artist.clone(),
                    genre: None,
                    image_path: None,
                };
                db.insert_artist(&artist)
                    .map_err(|e| format!("Failed to insert artist: {}", e))?;
                song.artist_id = Some(artist.id.clone());
            }
            Err(e) => return Err(format!("Database error: {}", e)),
        }

        // Check if album exists, create if not
        if let Some(artist_id) = &song.artist_id {
            match db.find_album_by_name_and_artist(&song.album, artist_id) {
                Ok(Some(album)) => {
                    song.album_id = Some(album.id);
                }
                Ok(None) => {
                    // Create new album
                    let album = Album {
                        id: music::generate_id(),
                        name: song.album.clone(),
                        artist_id: artist_id.clone(),
                        artist_name: song.artist.clone(),
                        year: None,
                        cover_path: None,
                    };
                    db.insert_album(&album)
                        .map_err(|e| format!("Failed to insert album: {}", e))?;
                    song.album_id = Some(album.id);
                }
                Err(e) => return Err(format!("Database error: {}", e)),
            }
        }

        // Insert the song
        db.insert_song(song)
            .map_err(|e| format!("Failed to insert song: {}", e))?;
    }

    Ok(import_result)
}

// Get all songs
#[tauri::command]
fn get_all_songs(state: State<'_, AppState>) -> Result<Vec<Song>, String> {
    let db = state.db.lock().unwrap();
    let db = db.as_ref().ok_or("Database not initialized")?;

    db.get_all_songs()
        .map_err(|e| format!("Failed to get songs: {}", e))
}

// Get all artists
#[tauri::command]
fn get_all_artists(state: State<'_, AppState>) -> Result<Vec<Artist>, String> {
    let db = state.db.lock().unwrap();
    let db = db.as_ref().ok_or("Database not initialized")?;

    db.get_all_artists()
        .map_err(|e| format!("Failed to get artists: {}", e))
}

// Get all playlists
#[tauri::command]
fn get_all_playlists(state: State<'_, AppState>) -> Result<Vec<Playlist>, String> {
    let db = state.db.lock().unwrap();
    let db = db.as_ref().ok_or("Database not initialized")?;

    db.get_all_playlists()
        .map_err(|e| format!("Failed to get playlists: {}", e))
}

// Create artist
#[tauri::command]
fn create_artist(
    state: State<'_, AppState>,
    name: String,
    genre: Option<String>,
) -> Result<Artist, String> {
    let db = state.db.lock().unwrap();
    let db = db.as_ref().ok_or("Database not initialized")?;

    let artist = Artist {
        id: music::generate_id(),
        name,
        genre,
        image_path: None,
    };

    db.insert_artist(&artist)
        .map_err(|e| format!("Failed to create artist: {}", e))?;

    Ok(artist)
}

// Create playlist
#[tauri::command]
fn create_playlist(
    state: State<'_, AppState>,
    name: String,
    description: Option<String>,
    color: Option<String>,
) -> Result<Playlist, String> {
    let db = state.db.lock().unwrap();
    let db = db.as_ref().ok_or("Database not initialized")?;

    let playlist = Playlist {
        id: music::generate_id(),
        name,
        description,
        color,
        song_ids: Vec::new(),
        date_created: music::get_timestamp(),
    };

    db.insert_playlist(&playlist)
        .map_err(|e| format!("Failed to create playlist: {}", e))?;

    Ok(playlist)
}

// Add songs to playlist
#[tauri::command]
fn add_songs_to_playlist(
    state: State<'_, AppState>,
    playlist_id: String,
    song_ids: Vec<String>,
) -> Result<(), String> {
    let db = state.db.lock().unwrap();
    let db = db.as_ref().ok_or("Database not initialized")?;

    for song_id in song_ids {
        db.add_song_to_playlist(&playlist_id, &song_id)
            .map_err(|e| format!("Failed to add song to playlist: {}", e))?;
    }

    Ok(())
}

// Remove song from playlist
#[tauri::command]
fn remove_song_from_playlist(
    state: State<'_, AppState>,
    playlist_id: String,
    song_id: String,
) -> Result<(), String> {
    let db = state.db.lock().unwrap();
    let db = db.as_ref().ok_or("Database not initialized")?;

    db.remove_song_from_playlist(&playlist_id, &song_id)
        .map_err(|e| format!("Failed to remove song from playlist: {}", e))
}

// Delete song
#[tauri::command]
fn delete_song(state: State<'_, AppState>, song_id: String) -> Result<(), String> {
    let db = state.db.lock().unwrap();
    let db = db.as_ref().ok_or("Database not initialized")?;

    db.delete_song(&song_id)
        .map_err(|e| format!("Failed to delete song: {}", e))
}

// Save artist image
#[tauri::command]
async fn save_artist_image(
    app_handle: tauri::AppHandle,
    artist_id: String,
    image_data: Vec<u8>,
    extension: String,
) -> Result<String, String> {
    music::save_artist_image(&app_handle, &artist_id, image_data, &extension).await
}

// Scan music directory
#[tauri::command]
async fn scan_music_directory(
    app_handle: tauri::AppHandle,
    state: State<'_, AppState>,
    directory_path: String,
) -> Result<ImportResult, String> {
    use walkdir::WalkDir;

    let mut file_paths = Vec::new();
    let valid_extensions = ["mp3", "m4a", "flac", "wav", "ogg"];

    for entry in WalkDir::new(&directory_path).into_iter().filter_map(|e| e.ok()) {
        if entry.file_type().is_file() {
            if let Some(ext) = entry.path().extension() {
                if valid_extensions
                    .contains(&ext.to_str().unwrap_or("").to_lowercase().as_str())
                {
                    if let Some(path_str) = entry.path().to_str() {
                        file_paths.push(path_str.to_string());
                    }
                }
            }
        }
    }

    import_music_files(app_handle, state, file_paths).await
}

// ─────────────── NEW HELPER COMMANDS ──────────────────────────────────────────
#[tauri::command]
fn hash_file(path: String) -> Result<String, String> {
    use std::{fs::File, io::Read};
    let mut file = File::open(&path).map_err(|e| e.to_string())?;
    let mut hasher = Sha1::new();
    let mut buf = [0u8; 8192];
    loop {
        let n = file.read(&mut buf).map_err(|e| e.to_string())?;
        if n == 0 {
            break;
        }
        hasher.update(&buf[..n]);
    }
    Ok(format!("{:x}", hasher.finalize()))
}

#[tauri::command]
fn save_state(payload: String, app_handle: tauri::AppHandle) -> Result<(), String> {
    let dir = path::app_dir(&app_handle.config()).ok_or("no app dir")?;
    std::fs::create_dir_all(&dir).ok();
    std::fs::write(dir.join("library.json"), payload).map_err(|e| e.to_string())
}

#[tauri::command]
fn load_state(app_handle: tauri::AppHandle) -> Result<Option<String>, String> {
    let dir = path::app_dir(&app_handle.config()).ok_or("no app dir")?;
    let file = dir.join("library.json");
    match std::fs::read_to_string(&file) {
        Ok(s) => Ok(Some(s)),
        Err(_) => Ok(None),
    }
}

#[tauri::command]
fn read_audio(path: String) -> Result<Vec<u8>, String> {
    std::fs::read(path).map_err(|e| e.to_string())
}
// ──────────────────────────────────────────────────────────────────────────────

fn main() {
    
// ===== Metadata Update Stubs ===============================================
#[derive(Debug, Deserialize)]
pub struct SongUpdate {
    pub id: String,
    pub name: String,
    pub artist: String,
    pub album: String,
    pub genre: String,
    pub year: String,
    pub artwork: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct PlaylistUpdate {
    pub id: String,
    pub name: String,
    pub description: String,
    pub artwork: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct ArtistUpdate {
    pub id: String,
    pub name: String,
    pub bio: String,
    pub artwork: Option<String>,
}

#[tauri::command]
async fn update_song(payload: SongUpdate) -> Result<(), String> {
    println!("update_song: {:?}", payload);
    Ok(())
}

#[tauri::command]
async fn update_playlist(payload: PlaylistUpdate) -> Result<(), String> {
    println!("update_playlist: {:?}", payload);
    Ok(())
}

#[tauri::command]
async fn update_artist(payload: ArtistUpdate) -> Result<(), String> {
    println!("update_artist: {:?}", payload);
    Ok(())
}
// ===========================================================================
tauri::Builder::default()
        .setup(|app| {
            // Initialize database
            let db = init_database(&app.handle())?;

            // Set up app state
            app.manage(AppState {
                db: Mutex::new(Some(db)),
            });

            // Ensure library directory structure exists
            music::ensure_library_structure(&app.handle())?;

            Ok(())
        })
        .invoke_handler(tauri::generate_handler![
            import_music_files,
            get_all_songs,
            get_all_artists,
            get_all_playlists,
            create_artist,
            create_playlist,
            add_songs_to_playlist,
            remove_song_from_playlist,
            delete_song,
            save_artist_image,
            scan_music_directory,
            // NEW
            hash_file,
            save_state,
            load_state,
            read_audio,
        ,
            update_song,
            update_playlist,
            update_artist
        ]])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}
